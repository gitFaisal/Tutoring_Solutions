from termcolor import cprint, colored

PlayOne = colored("X", 'red', attrs=['bold'])
PlayTwo = colored("0", 'blue', attrs=['bold'])
Player = 1

grid =  [[" "," "," "," "," "," ", " "], 
        [" "," "," "," "," "," ", " "], 
        [" "," "," "," "," "," ", " "], 
        [" "," "," "," "," "," ", " "], 
        [" "," "," "," "," "," ", " "], 
        [" "," "," "," "," "," ", " "],]

# Creating grid to be printed using f string method and substituting values of grids
# on to printed grid.

print(f"""
----------------------
| {grid[0][0]}| {grid[0][1]}| {grid[0][2]}| {grid[0][3]}| {grid[0][4]}| {grid[0][5]}| {grid[0][6]}|
----------------------
| {grid[1][0]}| {grid[1][1]}| {grid[1][2]}| {grid[1][3]}| {grid[1][4]}| {grid[1][5]}| {grid[1][6]}|
----------------------
| {grid[2][0]}| {grid[2][1]}| {grid[2][2]}| {grid[2][3]}| {grid[2][4]}| {grid[2][5]}| {grid[2][6]}|
----------------------
| {grid[3][0]}| {grid[3][1]}| {grid[3][2]}| {grid[3][3]}| {grid[3][4]}| {grid[3][5]}| {grid[3][6]}|
----------------------
| {grid[4][0]}| {grid[4][1]}| {grid[4][2]}| {grid[4][3]}| {grid[4][4]}| {grid[4][5]}| {grid[4][6]}|
----------------------
| {grid[5][0]}| {grid[5][1]}| {grid[5][2]}| {grid[5][3]}| {grid[5][4]}| {grid[5][5]}| {grid[5][6]}|
----------------------


""")

# Function to check if a column is available.

def valid_col(column):
    # We set max row to 6, because if we return a 0, results in function being False.
    # So instead we will -1 from what its giving back for 0 values.
    max_row = 6
    taken_rows = 0
    for row in grid:
        if row[column] != " ":
            taken_rows += 1
    return max_row - taken_rows
    
# New Solution for valid_col function above
#def validColumn(col):
#   '''
#   Loops through a given column of our grid, returns coordinate to update if there is available space,
#   else returns False.
#   '''
#   if grid[0][col] != " ":
#     return "Full"

#   for i in range(5, -1, -1):
#     if grid[i][col] == " ":
#       return i

#def checkDiagonals(player):
    ''' 
    New function to add to the winner function that takes the grid and turns it into a np.array() object
    We then get all the diagonals from our grid and check if the player has won diagonally.
    '''
#   np_grid = np.array(grid)

#   diags = [np_grid[::-1,:].diagonal(i) for i in range(-3,4)]
#   diags.extend(np_grid.diagonal(i) for i in range(3,-4,-1))

#   test_grid = []

#   for i in [n.tolist() for n in diags]:
#     test_grid.append(i)

#   for i in range(1, len(test_grid)-1):
#     counter = 0
#     for e in test_grid[i]:
#       if e == player:
#         counter += 1
#       else:
#         counter = 0

#       if counter == 4:
#         return True


def make_move(row, column, piece):
    grid[row][column] = piece

def is_winner(player):
    row_counter = 0
    col_counter = 0

    for row in grid:
        for i in row:
            if i == player:
                row_counter += 1
                if row_counter == 4:
                    return True
            else:
                row_counter = 0
    
    
    for row in range(0, len(grid)):
        for col in range(0, len(grid[row])-1):
            if grid[col][row] == player:
                col_counter += 1

                if col_counter == 4:
                    return True
            else:
                col_counter = 0
    
    
    
    return False


while (True):
    if Player == 1:
        column = int(input("Player 1 enter the column (0-6): "))
        # Logic to check if our function is returning 0 (False)
        if valid_col(column) == False:
            # A loop to keep asking for a valid column
            while True:
                print("Invalid selection, column is full!")
                column = int(input("Player 1 enter the column (0-6): "))
                # If a valid column is choosen, loop breaks and we continue game.
                if valid_col(column):
                    break
        # We take the valid_col value minus one and set it equal to where
        # our move will go in terms of rows.
        row = valid_col(column) - 1
        # using that in our make_move function.
        make_move(row, column, PlayOne)

    
        
    else:
        column = int(input("Player 2 enter the column (0-6): "))
        if valid_col(column) == False:
            while True:
                print("Invalid selection, column is full!")
                column = int(input("Player 1 enter the column (0-6): "))
                if valid_col(column):
                    break
        
        row = valid_col(column) - 1
        # using that in our make_move function.
        make_move(row, column, PlayTwo)

    Player += 1 
    Player = Player % 2
    print(f"""
----------------------
| {grid[0][0]}| {grid[0][1]}| {grid[0][2]}| {grid[0][3]}| {grid[0][4]}| {grid[0][5]}| {grid[0][6]}|
----------------------
| {grid[1][0]}| {grid[1][1]}| {grid[1][2]}| {grid[1][3]}| {grid[1][4]}| {grid[1][5]}| {grid[1][6]}|
----------------------
| {grid[2][0]}| {grid[2][1]}| {grid[2][2]}| {grid[2][3]}| {grid[2][4]}| {grid[2][5]}| {grid[2][6]}|
----------------------
| {grid[3][0]}| {grid[3][1]}| {grid[3][2]}| {grid[3][3]}| {grid[3][4]}| {grid[3][5]}| {grid[3][6]}|
----------------------
| {grid[4][0]}| {grid[4][1]}| {grid[4][2]}| {grid[4][3]}| {grid[4][4]}| {grid[4][5]}| {grid[4][6]}|
----------------------
| {grid[5][0]}| {grid[5][1]}| {grid[5][2]}| {grid[5][3]}| {grid[5][4]}| {grid[5][5]}| {grid[5][6]}|
----------------------


""")
    # Final step each round is to check if someone won, using our is_winner function.

    if is_winner(PlayOne):
        print("Player One is the winner!")
        break
    elif is_winner(PlayTwo):
        print("Player Two is the winner!")
        break



        
    
    
