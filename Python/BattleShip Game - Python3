import time
import os

def make_grid(x, y):
   grid = []
   for i in range(x):
       row = []
       for j in range(y):
         # Changed empty string '' to have two spaces '  ' for grid to align
           row.append('  ')
       grid.append(row)
   return grid

def draw_grid(the_grid):
  print(f"""
  | {the_grid[0][0]} | {the_grid[0][1]} | {the_grid[0][2]} | {the_grid[0][3]} | {the_grid[0][4]} | {the_grid[0][5]} | {the_grid[0][6]} | {the_grid[0][7]} | {the_grid[0][8]} | {the_grid[0][9]} |
  ---------------------------------------------------
  | {the_grid[1][0]} | {the_grid[1][1]} | {the_grid[1][2]} | {the_grid[1][3]} | {the_grid[1][4]} | {the_grid[1][5]} | {the_grid[1][6]} | {the_grid[1][7]} | {the_grid[1][8]} | {the_grid[1][9]} |
  ---------------------------------------------------
  | {the_grid[2][0]} | {the_grid[2][1]} | {the_grid[2][2]} | {the_grid[2][3]} | {the_grid[2][4]} | {the_grid[2][5]} | {the_grid[2][6]} | {the_grid[2][7]} | {the_grid[2][8]} | {the_grid[2][9]} |
  ---------------------------------------------------
  | {the_grid[3][0]} | {the_grid[3][1]} | {the_grid[3][2]} | {the_grid[3][3]} | {the_grid[3][4]} | {the_grid[3][5]} | {the_grid[3][6]} | {the_grid[3][7]} | {the_grid[3][8]} | {the_grid[3][9]} |
  ---------------------------------------------------
  | {the_grid[4][0]} | {the_grid[4][1]} | {the_grid[4][2]} | {the_grid[4][3]} | {the_grid[4][4]} | {the_grid[4][5]} | {the_grid[4][6]} | {the_grid[4][7]} | {the_grid[4][8]} | {the_grid[4][9]} |
  ---------------------------------------------------
  | {the_grid[5][0]} | {the_grid[5][1]} | {the_grid[5][2]} | {the_grid[5][3]} | {the_grid[5][4]} | {the_grid[5][5]} | {the_grid[5][6]} | {the_grid[5][7]} | {the_grid[5][8]} | {the_grid[5][9]} |
  ---------------------------------------------------
  | {the_grid[6][0]} | {the_grid[6][1]} | {the_grid[6][2]} | {the_grid[6][3]} | {the_grid[6][4]} | {the_grid[6][5]} | {the_grid[6][6]} | {the_grid[6][7]} | {the_grid[6][8]} | {the_grid[6][9]} |
  ---------------------------------------------------
  | {the_grid[7][0]} | {the_grid[7][1]} | {the_grid[7][2]} | {the_grid[7][3]} | {the_grid[7][4]} | {the_grid[7][5]} | {the_grid[7][6]} | {the_grid[7][7]} | {the_grid[7][8]} | {the_grid[7][9]} |
  ---------------------------------------------------
  | {the_grid[8][0]} | {the_grid[8][1]} | {the_grid[8][2]} | {the_grid[8][3]} | {the_grid[8][4]} | {the_grid[8][5]} | {the_grid[8][6]} | {the_grid[8][7]} | {the_grid[8][8]} | {the_grid[8][9]} |
  ---------------------------------------------------
  | {the_grid[9][0]} | {the_grid[9][1]} | {the_grid[9][2]} | {the_grid[9][3]} | {the_grid[9][4]} | {the_grid[9][5]} | {the_grid[9][6]} | {the_grid[9][7]} | {the_grid[9][8]} | {the_grid[9][9]} |
  ---------------------------------------------------

  """)

  
# Make sure the move is on the board.
def valid_move(x,y, grid):
  try:
    if grid[x][y]:
      return True
  except IndexError:
    print("Please select coordinates on the board!")
    return False
# Just checks ship dictionary for active ships.
def is_winner(ship_dict):
  for ship in ship_dict.keys():
    if ship_dict[ship] != 0:
      return False
  return True

def display_board(player):
  print(f"{player.player} Turn:")
  print("TARGET BOARD:")
  draw_grid(player.boards['target'])
  print(f"{player.player} BOARD: ")
  draw_grid(player.boards['main'])


class BattleshipGame:
  def __init__(self, size = 10):
    pass
  def run_game(self):
    game_running = True
    # Get names
    p_1 = input("Please enter Player One Name: ")
    p_2 = input("Please enter Player Two Name: ")
    # Create boards from Board class
    player_one = Board(p_1)
    player_two = Board(p_2)
    # Set Boards
    player_one.set_board()
    player_two.set_board()

    while game_running:
      display_board(player_one)
      
      while True:
        move = input("Enter your move (two digits one space in between): ").split()
        x = int(move[0])
        y = int(move[1])
        if valid_move(x, y, player_two.boards['main']):
          player_one.register_shot(x,y, player_two.boards['main'], player_one)
          break
      
      # Check is_winner
      if is_winner(player_two.active_ships):
        print("Player One has won!")
      

      display_board(player_two)
      
      while True:
        move = input("Enter your move (two digits one space in between): ").split()
        x = int(move[0])
        y = int(move[1])
        if valid_move(x, y, player_one.boards['main']):
          player_two.register_shot(x,y, player_one.boards['main'], player_two)
          break

      # Check is_winner
      if is_winner(player_one.active_ships):
        print("Player Two has won!")


      

  
  


class Board:
  def __init__(self, player, size=10):
    self.player = player
    self.size = size
    self.boards = {'main': [], 'target': []}
    self.active_ships = {'CA': 5, 'BA': 4, 'CR': 3, 'SU': 3, 'DE': 2}

  # Initial set up of board per player.
  def set_board(self):
    self.boards['main'] = make_grid(self.size, self.size)
    self.boards['target'] = make_grid(self.size, self.size)
    # Allowed Ships
    ships = {'Carrier':5, 'Battleship': 4, 'Cruiser': 3, 'Submarine': 3, 'Destroyer':2}
    # Intro + Draw grid
    print(f"{self.player}, prepare to place your fleet.")
    draw_grid(self.boards['main'])

    for ship in ships.keys():

      ship_placed = False
      while ship_placed == False:
        coordinates = input(f"Enter x y coordinates to place the {ship}: ").split(" ")
        right_down = input("Enter Right or Down (r or d): ").lower()

        start_pos = int(coordinates[0])
        end_pos = int(coordinates[1])
        positions = (start_pos, end_pos)

        ship_symbol = ship[:2].upper()

        if self.place_ship(self.boards['main'], ship_symbol, positions, ships[ship], right_down):
          self.place_ship(self.boards['main'], ship_symbol, positions, ships[ship], right_down)
          draw_grid(self.boards['main'])
          ship_placed = True
        else:
          print("Invalid position or overlapping ships, try again.")




  def register_shot(self, x, y, enemy_board, player_board):
    if self.boards['target'][x][y] != "  ":
      print("Invalid Move, try again.")
    elif enemy_board[x][y] != "  ":
      self.boards['target'][x][y] = "XX"
      self.active_ships[enemy_board[x][y]] -= 1
      enemy_board[x][y] = "XX"
      # Print message of ship hit, and clear board and print updated board.
  
      os.system('clear')
      display_board(player_board)
      print("You hit a enemy ship!")
      time.sleep(1.5)
      os.system('clear')


    elif enemy_board[x][y] == "  ":
      self.boards['target'][x][y] = "OO"

      os.system('clear')
      display_board(player_board)
      print("You shot missed!")
      time.sleep(1.5)
      os.system('clear')

    

  def place_ship(self, the_grid, ship_symbol, starting_pos, length, down_right):
    row = starting_pos[0]
    col = starting_pos[1]

    if down_right == 'd':
      # Validate space on board
      for i in range(0, length):
        if the_grid[row][col] != "  ":
          return False
        row += 1
      # Place ship
      row = starting_pos[0]

      for i in range(row, row+length):
        the_grid[i][col] = ship_symbol
    
      
    elif down_right == 'r':
      # Validate space on board
      for i in range(col, col+length):

        if i > len(the_grid[row]) -1:
          return False
        elif the_grid[row][col] != "  ":
          return False
        col += 1
      # Place ship
      col = starting_pos[1]
      for i in range(col, col+length):
        the_grid[row][i] = ship_symbol

  

    return True



game = BattleshipGame()

game.run_game()

