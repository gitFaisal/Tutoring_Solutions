
import smtplib
import os
import time

class Empty(Exception):
  def __str__(self):
    return "No value was entered"

class InvalidCarNum(Exception):
  def __str__(self):
    return "This item was not found in our inventory"

class NotInCart(Exception):
  def __str__(self):
    return 'The item number you entered was not found in the cart'

class InvalidNumber(Exception):
  def __str__(self):
    return "Invalid number entered (Positive Integers only)"

class DuplicateItem(Exception):
  def __str__(self):
    return "This item already exits in your cart"



def clear_screen():
  os.system("cls" if os.name == 'nt' else "clear")

def validate_days():
  try:
    days = int(input("Enter the number of days you want to borrow: "))

    if days <= 0:
      raise InvalidNumber
    return days 

  except ValueError:
    clear_screen()
    print("Invalid number entered (Positive Integers only)")
  except InvalidNumber as IN:
    clear_screen()
    print(IN)

def print_screen(option):
  clear_screen()
  print(f'''        
  \n*************************************************************\n
  \n                   ------ {option} ------\n
  \n\n      <Press the ENTER key to return back to MAIN MENU>\n\n
  \n*************************************************************\n''')




class Car:
  def __init__(self,item_number,model,price):
    self.item_number = item_number
    self.model = model
    self.price = price

  def __str__(self):
    return f'''
    Item Number:{self.item_number}\n
    Model:{self.model}\n
    Daily Price:${self.price}\n
    
    *************************************************************
    '''

class Inventory:
  def __init__(self):
    self.cars = {}

  def add_cars(self):
      """Reads data from txt file"""
      f = open("carlist.txt","r")
      for line in f.readlines():
          line=line.strip("\n").split(",")
          # Cast the price into a float as its being read from the txt file
          car = Car(line[0],line[1],float(line[2])) 
          self.cars[car.item_number] = car
      f.close()

  
  def display(self):
    clear_screen()
    print("""
        **** Cars available for rent ****
    """)
    print("Item Number\t\tModel\t\t\t\tDaily Price")

    for car in self.cars.values():
      car_model = car.model
      if len(car_model) != 21:
        spacing = " " * (21 - len(car_model))
        car_model += spacing
      print(f"{car.item_number}\t\t{car_model}\t\t${car.price}")
      print("----------------------------------------------")


# i want to make sure that methods inside each class are behaviors that make sense to the class, not sure if this class should be broken up into 2 or keep it? 
class Cart(Inventory):
  def __init__(self):
    super().__init__()
    self.cars_choosen = [] 

  def add_car(self):
    print_screen("ADD Screen")
    car_num = input("\n\nEnter the item number to add:  ")
    
    try:   
      if car_num == "":
        raise Empty

      self.add_cars()

      if car_num not in self.cars.keys():
        raise InvalidCarNum

      if self.check_cart(car_num):
        raise DuplicateItem
      self.cars_choosen.append(self.cars[car_num])
      clear_screen()
      print(f"Car: {self.cars[car_num].model}\nSuccesfully Added to your Cart!\n")

    except Empty as e:
      clear_screen()
      print(e)
    except InvalidCarNum as I:
      clear_screen()
      print(I)
    except DuplicateItem as DI:
      clear_screen()
      print(DI)
    
  def display(self):
    if len(self.cars_choosen) == 0:
      clear_screen()
      print("Your cart is empty.\n")
    else:
      print("Cars in your cart: \n")
      for i in self.cars_choosen:
        print(f"Item num - {i.item_number}: {i.model}")
      print("\n")

  def check_cart(self, item_num):
    for i in self.cars_choosen:
      if item_num in i.item_number:
        return True
    return False
 
  def delete_car(self):
    clear_screen()
    print_screen("DELETE screen")
    self.display() # Fix
    item_num = input("Please enter item number to remove: ")

    try:
      if item_num == "":
        raise Empty
      elif not self.check_cart(item_num):
        raise NotInCart
      

      for car in self.cars_choosen:
        # When we find the correct car by comparing item numbers:
        if car.item_number == item_num:
          # Find the index location of that car, using index() method on our cars_choosen list.
          index = self.cars_choosen.index(car)
          clear_screen()
          print(f"{self.cars_choosen[index].model} has been removed from your cart.\n")
          # Delete that car using pop() method, by giving it the index of car.
          self.cars_choosen.pop(index)
    except NotInCart as N:
      print(N)
    except Empty as E:
      print(E)

  def checkout(self):
    if len(self.cars_choosen)==0:
        print("Your Cart is Empty!")
    else:
        # Loop through cars_choosen list.
        for car in self.cars_choosen: 

          days = validate_days()

          if not days:
            time.sleep(3)
            clear_screen()
            return

          i = car.price
          total= i * days
          
          print("\nCar Rental Summary","\nCar:", car.model,"\nNumber of days:",days,"\nTotal Amount: $%.2f"%total)

        cust_response=input("\nDo you want to Confirm Reservation? Enter Y or N:")
        if cust_response.lower()=='y':
          # Your info.
          sender_email = 'python.oop304@gmail.com'
          password = 'Pythonpython'
          # User will be asked for their email.
          try:
            rec_email = input("Enter your Email: ")
            if rec_email == "":
              raise Empty
            # The message being sent.
            message = "Your rental is ready for pick up!"
            
            # Server info.
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender_email, password)
            server.sendmail(sender_email, rec_email, message)
            print("Email sent!")
            server.close()
          except Empty as E:
            clear_screen()
            print(E)

        else:
            return False


car = Inventory()
cart = Cart()

while True: # will need to add a 'delete' option as well
  print(
      """*************************************************************

                      ------ MAIN MENU ------
                            
                Select from the following options:

          \t1) - Display Cars for Rent 
          \t2) - Add to Cart
          \t3) - Delete item
          \t4) - View Cart
          \t5) - Checkout
          \t6) - Quit the program
      \n\n*************************************************************
      """
      )
  # Try block that throws an exception when user did not select the right option.

  user_input = input("\n")

  if user_input == '1':
    car.add_cars()
    car.display()

  elif user_input == '2':
    cart.add_car()

  elif user_input == '3':
    cart.delete_car()

  elif user_input == '4':
    clear_screen()
    print_screen("VIEW Screen")
    cart.display()
    input()
    clear_screen()
    
  elif user_input == '5':
    cart.checkout()

  elif user_input == '6':
    print("Program exiting...")
    time.sleep(1)
    print("See you next time!")
    break
